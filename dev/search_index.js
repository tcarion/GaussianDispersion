var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GaussianDispersion","category":"page"},{"location":"#GaussianDispersion","page":"Home","title":"GaussianDispersion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GaussianDispersion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GaussianDispersion]","category":"page"},{"location":"#GaussianDispersion.AbstractDispersionFunctions","page":"Home","title":"GaussianDispersion.AbstractDispersionFunctions","text":"AbstractDispersionFunctions\n\nDefine types for representing functions to compute the dispersion coefficients with respect to the downwind distance x in meter. Those types must implement the sigma_y and sigma_z methods that both return a closure for calculating σ_y and σ_z respectively. Instanciating those types give a functor that takes as argument the downwind distance and return the dispersion coefficients.\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.GaussianPlume","page":"Home","title":"GaussianDispersion.GaussianPlume","text":"struct GaussianPlume{M, T}\n\nStructure related to the release conditions\n\nrelease: release parameters\nmeteo: parameters related to the atmospheric conditions\ndispcoefs: object representing the dispersion coefficients\nreflection: if ground reflection is considered\n_z_exp_terms\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.HeatBalanceParams","page":"Home","title":"GaussianDispersion.HeatBalanceParams","text":"struct HeatBalanceParams{C, A, B}\n\nValues for the heat balance parametrization.\n\n'albedo' : \nC_g: parameter for the estimation of the heat flux to the ground in the equation q_G = C_G R_n. \n\nTypical values are 0.05-0.25 for rural, 0.25-0.3 for urban and 0.1 for grasslands (Scire et al., 2000)\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.PGStability","page":"Home","title":"GaussianDispersion.PGStability","text":"PGStability <: AbstractPGStability\n\nDefine the stability classes for the model according to Pasquill and Gifford. #! If multiple classes are defined, the average result for each class is considered.\n\nExample\n\njulia> pgstab = PGStability(:A)\nPGStability(GaussianDispersion.PGVeryUnstable())\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.PGStabilityClass","page":"Home","title":"GaussianDispersion.PGStabilityClass","text":"PGStabilityClass\n\nAbstract type of Pasquill-Gifford stability classes. The concrete types start with PG followed by the letter from Pasquill-Gifford classes (A, B, C, D, E, F).\n\nReference\n\n(Pasquill, 1961; Gifford, 1961).\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.ReleaseParams","page":"Home","title":"GaussianDispersion.ReleaseParams","text":"struct ReleaseParams{T}\n\nStructure related to the release conditions\n\nh: Effective source height [m]\nQ: Emission rate [g/s]\nTs: Gas temperature out of the stack [K]\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.albedo_elevation-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.albedo_elevation","text":"albedo_elevation(albedo_90, ϕ) -> Any\n\n\nAlbedo given albedo_90 the albedo at 90° and ϕ the solar elevation\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.briggs_buoyancy_flux-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.briggs_buoyancy_flux","text":"briggs_buoyancy_flux(\n    gas_density,\n    air_density,\n    stack_radius,\n    gas_velocity\n)\n\n\nBuoyancy flux parameter according to Briggs (1968).\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.friction_temp-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.friction_temp","text":"friction_temp(q, rho, u_star, c_p) -> Any\n\n\nCalculate the friction temperature from the surface pressure p [Pa], temperature t [K], dewpoint temp td [K] and stress stress [N/m²].\n\nArguments\n\nq:       surface sensible heat flux [W/m²]\nrho:     air density [kg/m³]\nu_star:   scale velocity [m/s]\nc_p:     specific heat capacities of dry air [J/kg/K]\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.friction_velocity-NTuple{5, Any}","page":"Home","title":"GaussianDispersion.friction_velocity","text":"friction_velocity(p, t, td, stress, R_gas) -> Any\n\n\nCalculate the friction velocity from the surface pressure p [Pa], temperature t [K], dewpoint temp td [K] and stress stress [N/m²].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.friction_velocity-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.friction_velocity","text":"friction_velocity(u_m, z_m, z_0; karman) -> Any\n\n\nCalculate the friction velocity from a velocity u_m measured at z_m on a surface of roughness length z_0.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.height_hs-NTuple{5, Any}","page":"Home","title":"GaussianDispersion.height_hs","text":"height_hs(p, ps, R_gas, T, g) -> Any\n\n\nGet height from pressure level in a hydrostatic atmosphere.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.height_isa-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.height_isa","text":"height_isa(p, R_gas, g) -> Any\n\n\nGet height from pressure level in the international standard atmosphere.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.hour_angle","page":"Home","title":"GaussianDispersion.hour_angle","text":"hour_angle(t) -> Any\nhour_angle(t, t0) -> Any\n\n\nt the time in hour and t0 the time of the solar noon.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianDispersion.log_wind_profile-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.log_wind_profile","text":"log_wind_profile(u_star, z, z_0, L; karman) -> Any\n\n\nCalculate the log wind velocity profile.\n\nArguments\n\nu_star:   friction velocity [m/s]                  \nz:        height [m]\nz_0:      roughness length [m]\nL:        Obukhov length [m]\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.net_radiation-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.net_radiation","text":"net_radiation(R, albedo, cloud_cover, T_surf) -> Any\n\n\nNet radiation energy flux received by the earth surface [W m^-2] with R the solar flux (solar_energy_flux)\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.obukhov-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.obukhov","text":"obukhov(ps, ts, u_star, q; c_p, R_gas, karman, g) -> Any\n\n\nCalculate Obukhov scale height from surface meteorological data and sensible heat flux.\n\nArguments\n\nps:      surface pressure [Pa]                  \nts:      surface temperature [K]                \nu_star:  scale velocity [m/s]                   \nq:       surface sensible heat flux [W/m2]      \n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.obukhov-NTuple{7, Any}","page":"Home","title":"GaussianDispersion.obukhov","text":"obukhov(\n    ps,\n    ts,\n    td,\n    t,\n    p,\n    u_star,\n    q;\n    c_p,\n    R_gas,\n    karman,\n    g\n) -> Any\n\n\nCalculate Obukhov scale height from surface meteorological data and sensible heat flux.\n\nArguments\n\nps:      surface pressure [Pa]                  \nts:      surface temperature [K]                \ntd:      surface dew point [K]                  \nt:       temperature first model level [K]\np :      pressure first model level [Pa]\nu_star: scale velocity [m/s]                   \nq:       surface sensible heat flux [W/m2]      \n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.pasquill_gifford-Tuple{AbstractSkyCondition, Real}","page":"Home","title":"GaussianDispersion.pasquill_gifford","text":"pasquill_gifford(criteria::AbstractSkyCondition, windspeed::Real)\n\nReturn a list of stability classes according to the Pasquill Gifford criteria\n\nExample\n\njulia> pasquill_gifford(Moderate, 5.5) Set{StabilityClass} with 2 elements:  C  D\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.plume_rise-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.plume_rise","text":"plume_rise(flux_param, x, u)\n\n\nPlume rise Δh [m] according to Briggs (1975) parametrization. x is the downwind distance in meter and u the downwind velocity in meter/second.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.potential_temp-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.potential_temp","text":"potential_temp(t, p, akap) -> Any\n\n\nCalculate the potential temperature.\n\nArguments\n\nt:       temperature [K]                \np:       pressure [Pa]                \nR_gas:   individual gas constant for dry air [J/kg/K]\nc_p:     specific heat capacities of dry air [J/kg/K]                \n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.saturation_pressure-Tuple{Any}","page":"Home","title":"GaussianDispersion.saturation_pressure","text":"saturation_pressure(t) -> Any\n\n\nCalculate the saturation vapor pressure from Arden Buck equations (Buck, 1996). t is in K, result in Pa.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.sensible_heat_flux-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.sensible_heat_flux","text":"sensible_heat_flux(C_g, net_rad, B) -> Any\n\n\nSensible heat flux to the surface [W m^-2]. net_rad can be calculated with net_radiation\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_declination-Tuple{Any}","page":"Home","title":"GaussianDispersion.solar_declination","text":"solar_declination(day) -> Any\n\n\nLatitude [°] where the sun is in the zenith at the solar noon. day is the day of the year\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_elevation-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.solar_elevation","text":"solar_elevation(lat, sol_dec, h_angle) -> Any\n\n\nSolar elevation [°] given the latitude, the solar declination and the hour angle.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_energy_flux-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.solar_energy_flux","text":"solar_energy_flux(Φ, n) -> Any\n\n\nSolar radiation energy flux W m^-2 given the solar elevation Φ and n the fractional cloud cover. Ref: Kasten and Czeplak, 1980; Holtslag and van Ulden, 1983.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.virtual_temp-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.virtual_temp","text":"virtual_temp(ps, t, e) -> Any\n\n\nCalculate the virtual temperature from the surface pressure ps [Pa], the temperature t [K], and the vapor pressure e [Pa].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.virtual_temp-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.virtual_temp","text":"virtual_temp(t, w) -> Any\n\n\nCalculate the virtual temperature from the temperature t [K] and the specific humidity w [kg/kg].\n\n\n\n\n\n","category":"method"}]
}
