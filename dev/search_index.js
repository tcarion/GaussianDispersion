var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GaussianDispersion","category":"page"},{"location":"#GaussianDispersion","page":"Home","title":"GaussianDispersion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GaussianDispersion.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GaussianDispersion]","category":"page"},{"location":"#GaussianDispersion.DispersionParams-Tuple{Real, GaussianDispersion.AbstractTerrain, StabilityClass}","page":"Home","title":"GaussianDispersion.DispersionParams","text":"DispersionParams(x::Real, terrain::AbstractTerrain, stability::StabilityClass)\n\nReturn a DispersionParams struct given the downwind direction x, the terrain and stability class\n\nExample\n\njulia> DispersionParams(100, Rural, A) DispersionParams(21.89081818461976, 20.0) ```\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.GaussianDispersionParams","page":"Home","title":"GaussianDispersion.GaussianDispersionParams","text":"mutable struct GaussianDispersionParams\n\nStructure related to the release conditions\n\nrelease\nrelease parameters\nterrain\nterrain (Urban/Rural)\nstabilities\nset of stability classes\nreflection\nif ground reflection is considered\nhmix\nheight of the mixing layer\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.GaussianDispersionParams-Tuple{Real, Real, Real}","page":"Home","title":"GaussianDispersion.GaussianDispersionParams","text":"Return the concentration in [g m^{-3}] at some point given the conditions stated in params.\n\nx is the downwind distance from the point source.\ny is the horizontal distance perpendicular to the wind.\nz is the vertical distance from the point source.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.HeatBalanceParams","page":"Home","title":"GaussianDispersion.HeatBalanceParams","text":"mutable struct HeatBalanceParams\n\nValues for the heat balance parametrization.\n\n'albedo' : \nC_g: parameter for the estimation of the heat flux to the ground in the equation q_G = C_G R_n. \n\nTypical values are 0.05-0.25 for rural, 0.25-0.3 for urban and 0.1 for grasslands (Scire et al., 2000)\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.PasquillGiffordCriteria","page":"Home","title":"GaussianDispersion.PasquillGiffordCriteria","text":"PasquillGiffordCriteria\n\nCritera for determining the stability class according to sky conditions (Pasquill, 1961; Gifford, 1961) Strong, Moderate and Slight are for incoming solar radiation (for daytime) Cloudy and Clear are for cloudiness (for nighttime)\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.ReleaseParams","page":"Home","title":"GaussianDispersion.ReleaseParams","text":"mutable struct ReleaseParams\n\nStructure related to the release conditions\n\nh\nEffective source height [m]\nQ\nEmission rate [g/s]\nu\nWind speed [m/s]\n\n\n\n\n\n","category":"type"},{"location":"#GaussianDispersion.Stabilities-Tuple{Vararg{Union{String, Symbol}}}","page":"Home","title":"GaussianDispersion.Stabilities","text":"Stabilities(\n    stabs::Union{String, Symbol}...\n) -> Set{StabilityClass}\n\n\nDefine the stability classes for the model according to Pasquill and Gifford (Pasquill, 1961; Gifford, 1961). If multiple classes are defined, the average result for each class is considered.\n\nExample\n\njulia> Stabilities(:A, :B)\nSet{StabilityClass} with 2 elements:\n  GaussianDispersion.A\n  GaussianDispersion.B\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.albedo_elevation-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.albedo_elevation","text":"albedo_elevation(albedo_90, ϕ) -> Any\n\n\nAlbedo given albedo_90 the albedo at 90° and ϕ the solar elevation\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.briggs_dispersion-Tuple{Type{Rural}, StabilityClass}","page":"Home","title":"GaussianDispersion.briggs_dispersion","text":"briggs_dispersion(terrain::AbstractTerrain, stability::StabilityClass)\n\nGiven the terrain and the stability, return the three coefficients a, b, c for σy and σz respectively.\n\nExample\n\njulia> briggs_dispersion(Rural, A)\n((a = 0.22, b = 0.0001, c = -0.5), (a = 0.2, b = 0, c = 1.0))\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.buoyancy_flux-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.buoyancy_flux","text":"buoyancy_flux(\n    gas_density,\n    air_density,\n    stack_radius,\n    gas_velocity\n)\n\n\nBuoyancy flux parameter according to Briggs (1968).\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.disp_function-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.disp_function","text":"disp_function(a, b, c)\n\nReturn the function for calculating the dispersion parameters with respect to x given the coefficients of the equation ax(1 + bx)^c ```\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.friction_temp-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.friction_temp","text":"friction_temp(q, rho, u_star, c_p) -> Any\n\n\nCalculate the friction temperature from the surface pressure p [Pa], temperature t [K], dewpoint temp td [K] and stress stress [N/m²].\n\nArguments\n\nq:       surface sensible heat flux [W/m²]\nrho:     air density [kg/m³]\nu_star:   scale velocity [m/s]\nc_p:     specific heat capacities of dry air [J/kg/K]\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.friction_velocity-NTuple{5, Any}","page":"Home","title":"GaussianDispersion.friction_velocity","text":"friction_velocity(p, t, td, stress, R_gas) -> Any\n\n\nCalculate the friction velocity from the surface pressure p [Pa], temperature t [K], dewpoint temp td [K] and stress stress [N/m²].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.height_hs-NTuple{5, Any}","page":"Home","title":"GaussianDispersion.height_hs","text":"height_hs(p, ps, R_gas, T, g) -> Any\n\n\nGet height from pressure level in a hydrostatic atmosphere.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.height_isa-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.height_isa","text":"height_isa(p, R_gas, g) -> Any\n\n\nGet height from pressure level in the international standard atmosphere.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.hour_angle","page":"Home","title":"GaussianDispersion.hour_angle","text":"hour_angle(t) -> Any\nhour_angle(t, t0) -> Any\n\n\nt the time in hour and t0 the time of the solar noon.\n\n\n\n\n\n","category":"function"},{"location":"#GaussianDispersion.net_radiation-NTuple{4, Any}","page":"Home","title":"GaussianDispersion.net_radiation","text":"net_radiation(R, albedo, cloud_cover, T_surf) -> Any\n\n\nNet radiation energy flux received by the earth surface [W m^-2] with R the solar flux (solar_energy_flux)\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.obukhov","page":"Home","title":"GaussianDispersion.obukhov","text":"obukhov(ps, ts, td, t, p, u_star, q) -> Any\nobukhov(ps, ts, td, t, p, u_star, q, c_p) -> Any\nobukhov(ps, ts, td, t, p, u_star, q, c_p, R_gas) -> Any\nobukhov(\n    ps,\n    ts,\n    td,\n    t,\n    p,\n    u_star,\n    q,\n    c_p,\n    R_gas,\n    karman\n) -> Any\nobukhov(\n    ps,\n    ts,\n    td,\n    t,\n    p,\n    u_star,\n    q,\n    c_p,\n    R_gas,\n    karman,\n    g\n) -> Any\n\n\nCalculate Obukhov scale height from surface meteorological data and sensible heat flux.\n\nArguments\n\nps:      surface pressure [Pa]                  \nts:      surface temperature [K]                \ntd:      surface dew point [K]                  \nt:       temperature first model level [K]\np :      pressure first model level [Pa]\nu_star: scale velocity [m/s]                   \nq:       surface sensible heat flux [W/m2]      \n\n\n\n\n\n","category":"function"},{"location":"#GaussianDispersion.pasquill_gifford-Tuple{PasquillGiffordCriteria, Real}","page":"Home","title":"GaussianDispersion.pasquill_gifford","text":"pasquill_gifford(criteria::PasquillGiffordCriteria, windspeed::Real)\n\nReturn a list of stability classes according to the Pasquill Gifford criteria\n\nExample\n\njulia> pasquill_gifford(Moderate, 5.5) Set{StabilityClass} with 2 elements:  C  D\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.plume_rise-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.plume_rise","text":"plume_rise(flux_param, x, u)\n\n\nPlume rise Δh [m] according to Briggs (1975) parametrization. x is the downwind distance in meter and u the downwind velocity in meter/second.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.potential_temp-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.potential_temp","text":"potential_temp(t, p, akap) -> Any\n\n\nCalculate the potential temperature.\n\nArguments\n\nt:       temperature [K]                \np:       pressure [Pa]                \nR_gas:   individual gas constant for dry air [J/kg/K]\nc_p:     specific heat capacities of dry air [J/kg/K]                \n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.saturation_pressure-Tuple{Any}","page":"Home","title":"GaussianDispersion.saturation_pressure","text":"saturation_pressure(t) -> Any\n\n\nCalculate the saturation vapor pressure from Arden Buck equations (Buck, 1996). t is in K, result in Pa.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.sensible_heat_flux-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.sensible_heat_flux","text":"sensible_heat_flux(C_g, net_rad, B) -> Any\n\n\nSensible heat flux to the surface [W m^-2]. net_rad can be calculated with net_radiation\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_declination-Tuple{Any}","page":"Home","title":"GaussianDispersion.solar_declination","text":"solar_declination(day) -> Any\n\n\nLatitude [°] where the sun is in the zenith at the solar noon. day is the day of the year\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_elevation-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.solar_elevation","text":"solar_elevation(lat, sol_dec, h_angle) -> Any\n\n\nSolar elevation [°] given the latitude, the solar declination and the hour angle.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.solar_energy_flux-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.solar_energy_flux","text":"solar_energy_flux(Φ, n) -> Any\n\n\nSolar radiation energy flux W m^-2 given the solar elevation Φ and n the fractional cloud cover. Ref: Kasten and Czeplak, 1980; Holtslag and van Ulden, 1983.\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.virtual_temp-Tuple{Any, Any, Any}","page":"Home","title":"GaussianDispersion.virtual_temp","text":"virtual_temp(ps, t, e) -> Any\n\n\nCalculate the virtual temperature from the surface pressure ps [Pa], the temperature t [K], and the vapor pressure e [Pa].\n\n\n\n\n\n","category":"method"},{"location":"#GaussianDispersion.virtual_temp-Tuple{Any, Any}","page":"Home","title":"GaussianDispersion.virtual_temp","text":"virtual_temp(t, w) -> Any\n\n\nCalculate the virtual temperature from the temperature t [K] and the specific humidity w [kg/kg].\n\n\n\n\n\n","category":"method"}]
}
